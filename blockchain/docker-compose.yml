version: '3.8'

services:
  # Blockchain service
  blockchain:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: avalanche-blockchain
    environment:
      - CONSENSUS_MODE=hybrid
      - NETWORK_MODE=local
      - DATA_DIR=/data
      - API_PORT=9650
      - P2P_PORT=9651
      - MICROSERVICE_URL=http://consensus-service:8080
    ports:
      - "9650:9650"  # API port
      - "9651:9651"  # P2P port
    volumes:
      - blockchain-data:/data
    networks:
      - avalanche-network
    depends_on:
      - consensus-service
      - redis
      - postgres
    restart: unless-stopped

  # Consensus microservice (from microservices folder)
  consensus-service:
    build:
      context: ../microservices/services/consensus
      dockerfile: Dockerfile
    container_name: consensus-service
    environment:
      - CONSENSUS_MODE=snowman
      - VALIDATOR_THRESHOLD=0.67
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=avalanche_state
      - REDIS_URL=redis://redis:6379
    ports:
      - "8080:8080"
    networks:
      - avalanche-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: avalanche-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=avalanche_state
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - avalanche-network
    restart: unless-stopped

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: avalanche-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - avalanche-network
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: avalanche-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - avalanche-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: avalanche-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - avalanche-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Example client application
  example-client:
    build:
      context: ./example
      dockerfile: Dockerfile
    container_name: avalanche-example
    networks:
      - avalanche-network
    depends_on:
      - blockchain
    profiles:
      - example

networks:
  avalanche-network:
    driver: bridge

volumes:
  blockchain-data:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data: 