apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: avalanche-monitoring
  labels:
    app: prometheus
    version: v1.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        version: v1.0.0
    spec:
      serviceAccountName: prometheus-service-account
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: web
          containerPort: 9090
          protocol: TCP
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--web.enable-lifecycle'
        - '--storage.tsdb.retention.time=30d'
        - '--storage.tsdb.retention.size=50GB'
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 1000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: web
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: web
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
          readOnly: true
        - name: storage
          mountPath: /prometheus
        - name: rules
          mountPath: /etc/prometheus/rules
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: storage
        persistentVolumeClaim:
          claimName: prometheus-storage
      - name: rules
        configMap:
          name: prometheus-rules
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: avalanche-monitoring
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  ports:
  - name: web
    port: 9090
    targetPort: web
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: avalanche-monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: avalanche-monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'avalanche-microservices'
        
    rule_files:
      - "/etc/prometheus/rules/*.yml"
      
    scrape_configs:
    # Kubernetes API Server
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
        
    # Kubernetes Nodes
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
        
    # Kubernetes Pods
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
        
    # Consensus Service
    - job_name: 'consensus-service'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - avalanche-core
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: consensus-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: http
        
    # VM Manager Service
    - job_name: 'vm-manager-service'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - avalanche-core
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: vm-manager-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: http
        
    # P2P Network Service
    - job_name: 'p2p-network-service'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - avalanche-network
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: p2p-network-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: http
        
    # State Database
    - job_name: 'state-database'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - avalanche-storage
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: state-database
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
        
    # API Gateway
    - job_name: 'api-gateway'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - avalanche-gateway
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: api-gateway
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: http
        
    # Istio Service Mesh
    - job_name: 'istio-mesh'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - istio-system
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: istio-proxy;http-monitoring
        
    # Node Exporter
    - job_name: 'node-exporter'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        regex: 'node-exporter'
        action: keep
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: avalanche-monitoring
data:
  avalanche-rules.yml: |
    groups:
    - name: avalanche.consensus
      rules:
      - alert: ConsensusServiceDown
        expr: up{job="consensus-service"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Consensus service is down"
          description: "Consensus service has been down for more than 1 minute"
          
      - alert: HighConsensusLatency
        expr: histogram_quantile(0.95, rate(consensus_block_processing_duration_seconds_bucket[5m])) > 2
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High consensus latency"
          description: "95th percentile consensus latency is {{ $value }}s"
          
      - alert: LowBlockProductionRate
        expr: rate(consensus_blocks_produced_total[5m]) < 0.1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Low block production rate"
          description: "Block production rate is {{ $value }} blocks/sec"
          
    - name: avalanche.vm
      rules:
      - alert: VMManagerServiceDown
        expr: up{job="vm-manager-service"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "VM Manager service is down"
          description: "VM Manager service has been down for more than 1 minute"
          
      - alert: HighVMMemoryUsage
        expr: vm_manager_memory_usage_bytes / vm_manager_memory_limit_bytes > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High VM memory usage"
          description: "VM memory usage is {{ $value | humanizePercentage }}"
          
    - name: avalanche.network
      rules:
      - alert: P2PNetworkServiceDown
        expr: up{job="p2p-network-service"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "P2P Network service is down"
          description: "P2P Network service has been down for more than 1 minute"
          
      - alert: LowPeerCount
        expr: p2p_peer_count < 5
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Low peer count"
          description: "Peer count is {{ $value }}"
          
    - name: avalanche.database
      rules:
      - alert: DatabaseDown
        expr: up{job="state-database"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "State database is down"
          description: "State database has been down for more than 1 minute"
          
      - alert: HighDatabaseConnections
        expr: pg_stat_database_numbackends / pg_settings_max_connections > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High database connections"
          description: "Database connections usage is {{ $value | humanizePercentage }}"
          
    - name: avalanche.gateway
      rules:
      - alert: APIGatewayDown
        expr: up{job="api-gateway"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "API Gateway is down"
          description: "API Gateway has been down for more than 1 minute"
          
      - alert: HighAPILatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High API latency"
          description: "95th percentile API latency is {{ $value }}s"
          
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High error rate"
          description: "Error rate is {{ $value | humanizePercentage }}"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-service-account
  namespace: avalanche-monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-role
subjects:
- kind: ServiceAccount
  name: prometheus-service-account
  namespace: avalanche-monitoring 