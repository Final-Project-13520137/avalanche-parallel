apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: avalanche-gateway
  labels:
    app: api-gateway
    tier: gateway
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        tier: gateway
    spec:
      containers:
      - name: api-gateway
        image: avalanche/api-gateway:v1.0.0
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: PORT
          value: "8080"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-gateway-secrets
              key: jwt-secret
        - name: REDIS_URL
          value: "redis://cache-service.avalanche-storage.svc.cluster.local:6379"
        - name: CONSENSUS_SERVICE_URL
          value: "http://consensus-service.avalanche-core.svc.cluster.local:8080"
        - name: VM_MANAGER_URL
          value: "http://vm-manager-service.avalanche-core.svc.cluster.local:8081"
        - name: CHAIN_MANAGER_URL
          value: "http://chain-manager-service.avalanche-core.svc.cluster.local:8082"
        - name: VALIDATOR_SERVICE_URL
          value: "http://validator-service.avalanche-core.svc.cluster.local:8083"
        resources:
          requests:
            cpu: 300m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: avalanche-gateway
  labels:
    app: api-gateway
    tier: gateway
spec:
  selector:
    app: api-gateway
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-gateway-ingress
  namespace: avalanche-gateway
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.avalanche.local
    secretName: api-gateway-tls
  rules:
  - host: api.avalanche.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: avalanche-gateway
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-pdb
  namespace: avalanche-gateway
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: api-gateway
---
apiVersion: v1
kind: Secret
metadata:
  name: api-gateway-secrets
  namespace: avalanche-gateway
type: Opaque
data:
  jwt-secret: YXZhbGFuY2hlLWp3dC1zZWNyZXQtdmVyeS1sb25nLWFuZC1zZWN1cmUtc3RyaW5n # avalanche-jwt-secret-very-long-and-secure-string (base64)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: avalanche-gateway
data:
  config.yaml: |
    gateway:
      port: 8080
      timeout: 30s
      max_request_size: 10MB
      
    rate_limiting:
      requests_per_second: 100
      burst_size: 200
      
    cors:
      allowed_origins:
        - "*"
      allowed_methods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowed_headers:
        - "*"
      
    routes:
      - path: "/api/v1/consensus"
        target: "consensus-service"
        auth_required: true
      - path: "/api/v1/vm"
        target: "vm-manager-service"
        auth_required: true
      - path: "/api/v1/chain"
        target: "chain-manager-service"
        auth_required: true
      - path: "/api/v1/validator"
        target: "validator-service"
        auth_required: true
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-gateway-network-policy
  namespace: avalanche-gateway
spec:
  podSelector:
    matchLabels:
      app: api-gateway
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from: []
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: avalanche-core
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
    - protocol: TCP
      port: 8082
    - protocol: TCP
      port: 8083
  - to:
    - namespaceSelector:
        matchLabels:
          name: avalanche-storage
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53 